/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AnonExamInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addQuestion"
      | "authorizeTeacher"
      | "authorizedTeachers"
      | "autoGradeMultipleChoice"
      | "calculateClassAverage"
      | "createExam"
      | "examStudents"
      | "exams"
      | "getExamInfo"
      | "getExamStudents"
      | "getQuestionInfo"
      | "getStudentAnswer"
      | "getStudentAnswerCount"
      | "getStudentGrade"
      | "getSubmissionStatus"
      | "getTotalExams"
      | "grades"
      | "hasAccessToExam"
      | "manualGrade"
      | "protocolId"
      | "publishExam"
      | "publishGrade"
      | "questions"
      | "studentExamAccess"
      | "submissions"
      | "submitAnswers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnswerSubmitted"
      | "ExamCreated"
      | "ExamGraded"
      | "ExamPublished"
      | "GradePublished"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addQuestion",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      string[],
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeTeacher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedTeachers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "autoGradeMultipleChoice",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateClassAverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createExam",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "examStudents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exams", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getExamInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExamStudents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentAnswer",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentAnswerCount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStudentGrade",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalExams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grades",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccessToExam",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualGrade",
    values: [BigNumberish, AddressLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishExam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publishGrade",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "studentExamAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAnswers",
    values: [BigNumberish, BytesLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeTeacher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedTeachers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoGradeMultipleChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateClassAverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createExam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "examStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExamInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExamStudents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentAnswerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudentGrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalExams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAccessToExam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualGrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishExam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishGrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "studentExamAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAnswers",
    data: BytesLike
  ): Result;
}

export namespace AnswerSubmittedEvent {
  export type InputTuple = [
    examId: BigNumberish,
    student: AddressLike,
    submitTime: BigNumberish
  ];
  export type OutputTuple = [
    examId: bigint,
    student: string,
    submitTime: bigint
  ];
  export interface OutputObject {
    examId: bigint;
    student: string;
    submitTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExamCreatedEvent {
  export type InputTuple = [
    examId: BigNumberish,
    teacher: AddressLike,
    title: string
  ];
  export type OutputTuple = [examId: bigint, teacher: string, title: string];
  export interface OutputObject {
    examId: bigint;
    teacher: string;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExamGradedEvent {
  export type InputTuple = [
    examId: BigNumberish,
    student: AddressLike,
    teacher: AddressLike
  ];
  export type OutputTuple = [examId: bigint, student: string, teacher: string];
  export interface OutputObject {
    examId: bigint;
    student: string;
    teacher: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExamPublishedEvent {
  export type InputTuple = [examId: BigNumberish];
  export type OutputTuple = [examId: bigint];
  export interface OutputObject {
    examId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GradePublishedEvent {
  export type InputTuple = [examId: BigNumberish, student: AddressLike];
  export type OutputTuple = [examId: bigint, student: string];
  export interface OutputObject {
    examId: bigint;
    student: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AnonExam extends BaseContract {
  connect(runner?: ContractRunner | null): AnonExam;
  waitForDeployment(): Promise<this>;

  interface: AnonExamInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addQuestion: TypedContractMethod<
    [
      examId: BigNumberish,
      questionType: BigNumberish,
      questionText: string,
      options: string[],
      correctAnswerInput: BytesLike,
      correctAnswerProof: BytesLike,
      pointsInput: BytesLike,
      pointsProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  authorizeTeacher: TypedContractMethod<
    [teacher: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedTeachers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  autoGradeMultipleChoice: TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateClassAverage: TypedContractMethod<
    [examId: BigNumberish],
    [string],
    "nonpayable"
  >;

  createExam: TypedContractMethod<
    [
      title: string,
      description: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      duration: BigNumberish,
      maxScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  examStudents: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  exams: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        examId: bigint;
        title: string;
        description: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        duration: bigint;
        questionCount: bigint;
        isPublished: boolean;
        status: bigint;
        maxScore: bigint;
      }
    ],
    "view"
  >;

  getExamInfo: TypedContractMethod<
    [examId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        title: string;
        description: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        duration: bigint;
        questionCount: bigint;
        isPublished: boolean;
        status: bigint;
      }
    ],
    "view"
  >;

  getExamStudents: TypedContractMethod<
    [examId: BigNumberish],
    [string[]],
    "view"
  >;

  getQuestionInfo: TypedContractMethod<
    [examId: BigNumberish, questionIndex: BigNumberish],
    [
      [bigint, string, string[]] & {
        questionType: bigint;
        questionText: string;
        options: string[];
      }
    ],
    "view"
  >;

  getStudentAnswer: TypedContractMethod<
    [examId: BigNumberish, student: AddressLike, answerIndex: BigNumberish],
    [string],
    "view"
  >;

  getStudentAnswerCount: TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [bigint],
    "view"
  >;

  getStudentGrade: TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [
      [string, string, boolean, string] & {
        encryptedScore: string;
        encryptedGradeLevel: string;
        isPublished: boolean;
        comment: string;
      }
    ],
    "view"
  >;

  getSubmissionStatus: TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [
      [boolean, bigint, boolean] & {
        isSubmitted: boolean;
        submitTime: bigint;
        isGraded: boolean;
      }
    ],
    "view"
  >;

  getTotalExams: TypedContractMethod<[], [bigint], "view">;

  grades: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, string, string, boolean, bigint, string] & {
        examId: bigint;
        student: string;
        encryptedScore: string;
        encryptedGradeLevel: string;
        isPublished: boolean;
        gradedTime: bigint;
        teacherComment: string;
      }
    ],
    "view"
  >;

  hasAccessToExam: TypedContractMethod<
    [examId: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  manualGrade: TypedContractMethod<
    [
      examId: BigNumberish,
      student: AddressLike,
      scoreInput: BytesLike,
      scoreProof: BytesLike,
      comment: string
    ],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  publishExam: TypedContractMethod<
    [examId: BigNumberish],
    [void],
    "nonpayable"
  >;

  publishGrade: TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [void],
    "nonpayable"
  >;

  questions: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, string] & {
        examId: bigint;
        questionIndex: bigint;
        questionType: bigint;
        questionText: string;
        correctAnswer: string;
        points: string;
      }
    ],
    "view"
  >;

  studentExamAccess: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  submissions: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, bigint, boolean, string, boolean] & {
        examId: bigint;
        student: string;
        submitTime: bigint;
        isSubmitted: boolean;
        totalScore: string;
        isGraded: boolean;
      }
    ],
    "view"
  >;

  submitAnswers: TypedContractMethod<
    [
      examId: BigNumberish,
      encryptedAnswersInput: BytesLike[],
      answersProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addQuestion"
  ): TypedContractMethod<
    [
      examId: BigNumberish,
      questionType: BigNumberish,
      questionText: string,
      options: string[],
      correctAnswerInput: BytesLike,
      correctAnswerProof: BytesLike,
      pointsInput: BytesLike,
      pointsProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeTeacher"
  ): TypedContractMethod<[teacher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedTeachers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "autoGradeMultipleChoice"
  ): TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateClassAverage"
  ): TypedContractMethod<[examId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createExam"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      startTime: BigNumberish,
      endTime: BigNumberish,
      duration: BigNumberish,
      maxScore: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "examStudents"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "exams"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint
      ] & {
        examId: bigint;
        title: string;
        description: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        duration: bigint;
        questionCount: bigint;
        isPublished: boolean;
        status: bigint;
        maxScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExamInfo"
  ): TypedContractMethod<
    [examId: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        title: string;
        description: string;
        teacher: string;
        startTime: bigint;
        endTime: bigint;
        duration: bigint;
        questionCount: bigint;
        isPublished: boolean;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExamStudents"
  ): TypedContractMethod<[examId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getQuestionInfo"
  ): TypedContractMethod<
    [examId: BigNumberish, questionIndex: BigNumberish],
    [
      [bigint, string, string[]] & {
        questionType: bigint;
        questionText: string;
        options: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentAnswer"
  ): TypedContractMethod<
    [examId: BigNumberish, student: AddressLike, answerIndex: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentAnswerCount"
  ): TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStudentGrade"
  ): TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [
      [string, string, boolean, string] & {
        encryptedScore: string;
        encryptedGradeLevel: string;
        isPublished: boolean;
        comment: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubmissionStatus"
  ): TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [
      [boolean, bigint, boolean] & {
        isSubmitted: boolean;
        submitTime: bigint;
        isGraded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalExams"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grades"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, string, string, boolean, bigint, string] & {
        examId: bigint;
        student: string;
        encryptedScore: string;
        encryptedGradeLevel: string;
        isPublished: boolean;
        gradedTime: bigint;
        teacherComment: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAccessToExam"
  ): TypedContractMethod<
    [examId: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "manualGrade"
  ): TypedContractMethod<
    [
      examId: BigNumberish,
      student: AddressLike,
      scoreInput: BytesLike,
      scoreProof: BytesLike,
      comment: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publishExam"
  ): TypedContractMethod<[examId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "publishGrade"
  ): TypedContractMethod<
    [examId: BigNumberish, student: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, string, string] & {
        examId: bigint;
        questionIndex: bigint;
        questionType: bigint;
        questionText: string;
        correctAnswer: string;
        points: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "studentExamAccess"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [
      [bigint, string, bigint, boolean, string, boolean] & {
        examId: bigint;
        student: string;
        submitTime: bigint;
        isSubmitted: boolean;
        totalScore: string;
        isGraded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitAnswers"
  ): TypedContractMethod<
    [
      examId: BigNumberish,
      encryptedAnswersInput: BytesLike[],
      answersProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AnswerSubmitted"
  ): TypedContractEvent<
    AnswerSubmittedEvent.InputTuple,
    AnswerSubmittedEvent.OutputTuple,
    AnswerSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ExamCreated"
  ): TypedContractEvent<
    ExamCreatedEvent.InputTuple,
    ExamCreatedEvent.OutputTuple,
    ExamCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ExamGraded"
  ): TypedContractEvent<
    ExamGradedEvent.InputTuple,
    ExamGradedEvent.OutputTuple,
    ExamGradedEvent.OutputObject
  >;
  getEvent(
    key: "ExamPublished"
  ): TypedContractEvent<
    ExamPublishedEvent.InputTuple,
    ExamPublishedEvent.OutputTuple,
    ExamPublishedEvent.OutputObject
  >;
  getEvent(
    key: "GradePublished"
  ): TypedContractEvent<
    GradePublishedEvent.InputTuple,
    GradePublishedEvent.OutputTuple,
    GradePublishedEvent.OutputObject
  >;

  filters: {
    "AnswerSubmitted(uint256,address,uint256)": TypedContractEvent<
      AnswerSubmittedEvent.InputTuple,
      AnswerSubmittedEvent.OutputTuple,
      AnswerSubmittedEvent.OutputObject
    >;
    AnswerSubmitted: TypedContractEvent<
      AnswerSubmittedEvent.InputTuple,
      AnswerSubmittedEvent.OutputTuple,
      AnswerSubmittedEvent.OutputObject
    >;

    "ExamCreated(uint256,address,string)": TypedContractEvent<
      ExamCreatedEvent.InputTuple,
      ExamCreatedEvent.OutputTuple,
      ExamCreatedEvent.OutputObject
    >;
    ExamCreated: TypedContractEvent<
      ExamCreatedEvent.InputTuple,
      ExamCreatedEvent.OutputTuple,
      ExamCreatedEvent.OutputObject
    >;

    "ExamGraded(uint256,address,address)": TypedContractEvent<
      ExamGradedEvent.InputTuple,
      ExamGradedEvent.OutputTuple,
      ExamGradedEvent.OutputObject
    >;
    ExamGraded: TypedContractEvent<
      ExamGradedEvent.InputTuple,
      ExamGradedEvent.OutputTuple,
      ExamGradedEvent.OutputObject
    >;

    "ExamPublished(uint256)": TypedContractEvent<
      ExamPublishedEvent.InputTuple,
      ExamPublishedEvent.OutputTuple,
      ExamPublishedEvent.OutputObject
    >;
    ExamPublished: TypedContractEvent<
      ExamPublishedEvent.InputTuple,
      ExamPublishedEvent.OutputTuple,
      ExamPublishedEvent.OutputObject
    >;

    "GradePublished(uint256,address)": TypedContractEvent<
      GradePublishedEvent.InputTuple,
      GradePublishedEvent.OutputTuple,
      GradePublishedEvent.OutputObject
    >;
    GradePublished: TypedContractEvent<
      GradePublishedEvent.InputTuple,
      GradePublishedEvent.OutputTuple,
      GradePublishedEvent.OutputObject
    >;
  };
}
